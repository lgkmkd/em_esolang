instruction syntax: [opcode] [arg1] [arg2] ...


	instructions:


 - mov: [register to move to] [register or value to move] (ex: mov eax 5) (ex: mov df de)
 	- moves a value to a register
 	
 - smov: [register to move to] [char to add] [mode] (ex: smov de a 0) (ex: smov de 65 1)
 	- concatenates a char to the end of a string register (mode 0: char literal, 1: ascii char code)
 	
 - spop: [register to pop] [mode] (ex: spop de 0)
 	- removes the first or last character depending on the mode (mode 0: last, 1: first)
 	
 - syscall: (ex: syscall)
 	- calls the kernel
 	
 - push: [register or value to push to stack] (ex: push eax)
 	- pushes a value to the top of the stack
 	
 - pop: [register to pop to] (ex: pop ebx)
 	- pops the top of the stack to a register
 	
 - add: [register to add to] [register or value to add] (ex: add ecx 3)
 	- adds the second value to the first
 	
 - sub: [register to subtract to] [register or value to subtract] (ex: sub ecx 3)
 	- subtracts the second value to the first
 	
 - mul: [register to multiply to] [register or value to multiply] (ex: mul ecx 3)
 	- multiplies the second value to the first
 	
 - div: [register to divide to] [register or value to divide] (ex: div ecx 3)
 	- divides the second value to the first
 	
 - mod: [register to modulus to] [register or value to modulus] (ex: add ecx 3)
 	- modulus the second value to the first
 	
 - nop: (ex: nop)
 	- pauses execution for 0.1 seconds
 	
 - del: [register to empty] (ex: del eax)
 	- empties a register
 	
 - len: [register to measure] [destination of the length] (ex: len de) (ex: len eax)
 	- gets the length of a string or int register
 	
 - lbl: [name of label (int 0-255)] (ex: lbl 1)
 	- sets a label
 	
 - jmp: [label to jump to] (ex: jmp 1)
 	- jumps to a label
 	
 - je: [label to jump to] [first value (register)] [second value (int or register)] (ex: je 1 eax 10)
 	- jumps to a label if the two values are equal
 	
 - jne: [label to jump to] [first value (register)] [second value (int or register)] (ex: jne 1 eax 10)
 	- jumps to a label if the two values are not equal
 	
 - jl: [label to jump to] [first value (register)] [second value (int or register)] (ex: jl 1 eax 10)
 	- jumps to a label if the first value is less than the second
 	
 - jle: [label to jump to] [first value (register)] [second value (int or register)] (ex: jle 1 eax 10)
 	- jumps to a label if the first value is less than or equal to the second
 	
 - jg: [label to jump to] [first value (register)] [second value (int or register)] (ex: jg 1 eax 10)
 	- jumps to a label if the first value is greater than the second
 	
 - jge: [label to jump to] [first value (register)] [second value (int or register)] (ex: jge 1 eax 10)
 	- jumps to a label if the first value is greater than or equal to the second
 	
 - jz: [label to jump to] [value (register)] (ex: jz 1 eax)
 	- jumps to a label if the value is zero
 	
 - jnz: [label to jump to] [value (register)] (ex: jnz 1 eax)
 	- jumps to a label if the value is not zero



	kernel functions: 



eax		name		ebx			ecx			edx			de 					df
1		print 		value   	mode		-			-					string to print
2		read file	-			-			-			file name/output	-
3 		write file	- 			mode		-			file name 			string to write
4 		write ram	value 		mode		address		value				-
5 		read ram 	-		 	mode		address		- 					-
6 		end proc 	- 			- 			-			- 					-
7 		input 		- 			mode 		- 			-	 				-


 - print: prints a value to the command line
 	- eax: 1
 	- ebx: value to print (int)
 	- ecx: 0/1 (mode to print, 0: int (ebx), 1: string (de))
 	- de: value to print (int)

 - read file: reads a file to a register
 	- eax: 2
 	- de: file name/output

 - write file: writes a string to a file
 	- eax: 3
 	- ecx: mode (mode 0: overwrite, 1: append)
 	- de: file name
 	- df: string to write
 
 - write ram: writes a value to the ram
 	- eax: 4
 	- ebx: value (int)
 	- ecx: mode (mode 0: int, 1: string)
 	- edx: address
 	- de: value (string)
 
 - read ram: reads a value from the ram
 	- eax: 5
 	- edx: address
 	- edx: type (mode 0: int (to eax), 1: string (to de))
 
 - end process: ends process early
 	- eax: 6
 
 - input: get a user input
 	- eax: 7
 	- ecx: mode (mode 0: int (to eax), 1: string (to de))